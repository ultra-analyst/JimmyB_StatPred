# -*- coding: utf-8 -*-
"""dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i9gT_gTZMcKmBr8OV8b7X4P2ceIZqsKV
"""

!pip install streamlit pyngrok scikit-learn pandas requests beautifulsoup4 matplotlib

# Replace 'YOUR_NGROK_AUTHTOKEN' with your actual authtoken
!ngrok authtoken #Your Authtoken Here

# Commented out IPython magic to ensure Python compatibility.
# %%writefile dashboard.py
# 
# import streamlit as st
# import pandas as pd
# import numpy as np
# import requests
# from bs4 import BeautifulSoup
# from sklearn.linear_model import Lasso
# import matplotlib.pyplot as plt
# from pyngrok import ngrok
# import subprocess
# 
# # Step 1: Scrape New Data
# def get_game_logs(player_id, season):
#     url = f'https://www.basketball-reference.com/players/{player_id}/gamelog/{season}/'
#     response = requests.get(url)
#     soup = BeautifulSoup(response.text, 'html.parser')
#     table = soup.find('table', id='pgl_basic')
#     df = pd.read_html(str(table))[0]
#     if isinstance(df.columns, pd.MultiIndex):
#         df.columns = df.columns.droplevel()
#     df['Season'] = season
#     return df
# 
# player_id = 'b/butleji01'  # Jimmy Butler's Basketball-Reference ID
# seasons = list(range(2014, 2024))  # Seasons to scrape
# all_game_logs = pd.concat([get_game_logs(player_id, season) for season in seasons], ignore_index=True)
# all_game_logs.to_csv('jimmy_butler_game_logs.csv', index=False)
# 
# # Step 2: Calculate Season Averages
# def convert_minutes_played(mp):
#     try:
#         minutes, seconds = map(int, mp.split(':'))
#         return minutes + seconds / 60
#     except ValueError:
#         return np.nan  # Return NaN for non-numeric entries like 'Inactive'
# 
# all_game_logs['MP'] = all_game_logs['MP'].apply(lambda x: convert_minutes_played(x) if isinstance(x, str) else np.nan)
# all_game_logs['PTS'] = pd.to_numeric(all_game_logs['PTS'], errors='coerce')
# all_game_logs['AST'] = pd.to_numeric(all_game_logs['AST'], errors='coerce')
# all_game_logs['TRB'] = pd.to_numeric(all_game_logs['TRB'], errors='coerce')
# 
# # Drop rows with NaN values in key columns
# all_game_logs.dropna(subset=['MP', 'PTS', 'AST', 'TRB'], inplace=True)
# 
# # Select only numeric columns for season averages
# numeric_columns = ['PTS', 'AST', 'TRB', 'FGA', '3P', 'FTA', 'MP']
# season_averages = all_game_logs.groupby('Season')[numeric_columns].mean().reset_index()
# 
# # Step 3: Retrain Models
# features_pts = ['FGA', '3P', 'FTA', 'MP', 'AST', 'TRB']
# features_ast = ['FGA', '3P', 'FTA', 'MP', 'TRB', 'PTS']
# features_reb = ['FGA', '3P', 'FTA', 'MP', 'AST', 'PTS']
# 
# X_pts = season_averages[features_pts]
# y_pts = season_averages['PTS']
# X_ast = season_averages[features_ast]
# y_ast = season_averages['AST']
# X_reb = season_averages[features_reb]
# y_reb = season_averages['TRB']
# 
# model_pts = Lasso(max_iter=10000)
# model_ast = Lasso(max_iter=10000)
# model_reb = Lasso(max_iter=10000)
# 
# model_pts.fit(X_pts, y_pts)
# model_ast.fit(X_ast, y_ast)
# model_reb.fit(X_reb, y_reb)
# 
# # Step 4: Streamlit Dashboard
# def add_bg_from_url():
#     st.markdown(
#          f"""
#          <style>
#          .stApp {{
#              background-image: url("https://admin.sportshackster.com/WallPaperMedia/PlayerWallPaperImage/butler-1_63839189257469.6.jpg");
#              background-size: cover;
#              background-repeat: no-repeat;
#              background-attachment: fixed;
#          }}
#          </style>
#          """,
#          unsafe_allow_html=True
#      )
# 
# add_bg_from_url()
# 
# st.title('üèÄ Jimmy Butler Season Averages Prediction Dashboard')
# st.write('This dashboard displays the predicted season averages for PTS, AST, and TRB.')
# 
# # Sidebar for navigation
# st.sidebar.title('Navigation')
# page = st.sidebar.selectbox("Choose a page", ["Current Predictions", "Historical Data"])
# 
# if page == "Current Predictions":
#     st.subheader('Current Predictions')
#     st.write(f'Predicted PTS: {model_pts.predict([X_pts.iloc[-1].values])[0]:.1f}')
#     st.write(f'Predicted AST: {model_ast.predict([X_ast.iloc[-1].values])[0]:.1f}')
#     st.write(f'Predicted TRB: {model_reb.predict([X_reb.iloc[-1].values])[0]:.1f}')
# 
#     # Display predictions with larger font
#     st.markdown("""
#         <style>
#         .predictions {
#             font-size: 30px;
#             font-weight: bold;
#         }
#         </style>
#     """, unsafe_allow_html=True)
#     st.markdown(f'<p class="predictions">Predicted PTS: {model_pts.predict([X_pts.iloc[-1].values])[0]:.1f}</p>', unsafe_allow_html=True)
#     st.markdown(f'<p class="predictions">Predicted AST: {model_ast.predict([X_ast.iloc[-1].values])[0]:.1f}</p>', unsafe_allow_html=True)
#     st.markdown(f'<p class="predictions">Predicted TRB: {model_reb.predict([X_reb.iloc[-1].values])[0]:.1f}</p>', unsafe_allow_html=True)
# 
# elif page == "Historical Data":
#     st.subheader('Historical Data')
#     st.write(season_averages)
# 
#     # Plot historical data
#     st.subheader('PTS Over Seasons')
#     fig, ax = plt.subplots()
#     ax.plot(season_averages['Season'], season_averages['PTS'], marker='o', linestyle='-', color='b')
#     ax.set_xlabel('Season')
#     ax.set_ylabel('PTS')
#     ax.set_title('PTS Over Seasons')
#     st.pyplot(fig)
# 
#     st.subheader('AST Over Seasons')
#     fig, ax = plt.subplots()
#     ax.plot(season_averages['Season'], season_averages['AST'], marker='o', linestyle='-', color='r')
#     ax.set_xlabel('Season')
#     ax.set_ylabel('AST')
#     ax.set_title('AST Over Seasons')
#     st.pyplot(fig)
# 
#     st.subheader('TRB Over Seasons')
#     fig, ax = plt.subplots()
#     ax.plot(season_averages['Season'], season_averages['TRB'], marker='o', linestyle='-', color='g')
#     ax.set_xlabel('Season')
#     ax.set_ylabel('TRB')
#     ax.set_title('TRB Over Seasons')
#     st.pyplot(fig)
# 
# # Run Streamlit with ngrok
# def run_with_ngrok():
#     url = ngrok.connect(8501)
#     print(f'Streamlit app is live at: {url}')
#     subprocess.run(['streamlit', 'run', 'dashboard.py'])
# 
# if __name__ == '__main__':
#     run_with_ngrok()
#

!python dashboard.py